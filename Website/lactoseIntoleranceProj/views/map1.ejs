<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Map</title>

    <!-- leaflet -->
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin=""
    />
    <script
      src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
      integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
      crossorigin=""
    ></script>

    <!-- bootstrap -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>

    <!-- leaflet cluster -->
    <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet.markercluster@1.1.0/dist/MarkerCluster.css"
    />
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet.markercluster@1.1.0/dist/MarkerCluster.Default.css"
    />
    <script src="https://unpkg.com/leaflet.markercluster@1.1.0/dist/leaflet.markercluster.js"></script>

    <!-- nouislider -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.8.1/nouislider.css"
      rel="stylesheet"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.8.1/nouislider.js"></script>

    <!-- leaflet control select -->
    <link href="/leaflet.control.select.css" rel="stylesheet" />
    <script src="/leaflet.control.select.src.js"></script>

    <style>
      #map {
        height: 400px;
      }

      #slider {
        margin-top: 50px;
      }

      #scale {
        display: flex;
        justify-content: space-between;
        font-size: 0.9rem;
        margin-top: 10px;
      }

      #scale span {
        transform: translateY(-10px);
      }
    </style>
  </head>

  <body>
    <h1>Map</h1>
    <div id="map"></div>
    <div id="controls">
      <div>
        <label for="year-input">Years Ago:</label>
        <input id="year-input" type="number" value="0" />
      </div>
      <button id="set-year-btn">Set Year</button>
    </div>

    <div id="slider-container">
      <div id="slider"></div>
      <div id="scale"></div>
      <div id="slider-text">Years Ago Range: 0 - 10</div>
    </div>

    <script>
      let snpPanelSelections = [];
      let yearRange = [];

      // create map
      const map = L.map("map").setView([30, 0], 2);

      L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
        maxZoom: 19,
        attribution:
          '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
      }).addTo(map);

      let markers = L.markerClusterGroup();

      async function initializeSlider() {
        try {
          const data = await d3.json("/ancientHumanData.json");

          // Calculate the min and max of Mean Date
          const meanDates = data.elements
            .map((d) => +d["Mean Date"])
            .filter((d) => !isNaN(d));
          const minDate = Math.min(...meanDates);
          const maxDate = Math.max(...meanDates);

          // Initialize the slider with the calculated range
          const slider = document.getElementById("slider");
          noUiSlider.create(slider, {
            start: [minDate, maxDate],
            connect: true,
            behaviour: "drag",
            range: {
              min: minDate,
              max: maxDate,
            },
            step: 1,
          });

          yearRange = [minDate, maxDate];
          updateSliderText(yearRange);

          // Create the scale below the slider
          createScale(minDate, maxDate);

          slider.noUiSlider.on("set", (values, handle) => {
            const newYearRange = values.map((v) => Math.round(+v));
            if (
              newYearRange[0] === yearRange[0] &&
              newYearRange[1] === yearRange[1]
            ) {
              return;
            }
            yearRange = newYearRange;

            addPoints();
            updateSliderText(yearRange);
          });
        } catch (error) {
          console.error("Error fetching data for slider initialization:", error);
        }
      }

      const updateSliderText = (yearRange) => {
        const sliderText = document.getElementById("slider-text");
        sliderText.textContent = `Years Ago Range: ${yearRange[0]} - ${yearRange[1]}`;
      };

      const createScale = (minDate, maxDate) => {
        const scale = document.getElementById("scale");
        scale.innerHTML = ""; // Clear any existing scale elements

        const numTicks = 10; // Define the number of ticks for the scale
        const tickInterval = (maxDate - minDate) / (numTicks - 1);

        for (let i = 0; i < numTicks; i++) {
          const tickValue = Math.round(minDate + i * tickInterval);
          const tick = document.createElement("span");
          tick.textContent = tickValue;
          scale.appendChild(tick);
        }
      };

      function shouldAddPoint(point, snpPanelSelections) {
        for (const selection of snpPanelSelections) {
          if (+point[selection.rsid] == selection.num) {
            return true;
          }
        }
        return false;
      }

      function addPoints() {
        let newMarkers = L.markerClusterGroup();

        d3.json("/ancientHumanData.json")
          .then((data) => {
            data.elements.forEach((d) => {
              const latitude = +d.Latitude;
              const longitude = +d.Longitude;
              const meanDate = +d["Mean Date"];
              const groupId = d["Group ID"] || "N/A"; // Updated line

              if (
                !isNaN(latitude) &&
                !isNaN(longitude) &&
                shouldAddPoint(d, snpPanelSelections) &&
                meanDate >= yearRange[0] &&
                meanDate <= yearRange[1]
              ) {
                const marker = L.marker([latitude, longitude]);
                marker.on("click", () => {
                  const popupContent = `
                    <b>Group ID:</b> ${groupId}<br>
                    <b>Political Entity:</b> ${d["Political Entity"] || "N/A"}<br>
                    <b>Mean Date:</b> ${meanDate}`;
                  marker
                    .unbindPopup()
                    .bindPopup(popupContent)
                    .openPopup();
                });
                newMarkers.addLayer(marker);
              }
            });
            map.addLayer(newMarkers);
            map.removeLayer(markers);
            markers = newMarkers;
          })
          .catch((error) => {
            console.error(error);
          });
      }

      function innerItems(rsid) {
        return [
          {
            label: "0 copies of reference allele",
            value: { rsid: rsid, num: 0 },
          },
          {
            label: "1 copy of reference allele",
            value: { rsid: rsid, num: 1 },
          },
          {
            label: "2 copies of reference allele",
            value: { rsid: rsid, num: 2 },
          },
          { label: "missing data", value: { rsid: rsid, num: 9 } },
        ];
      }

      const items = [
        {
          label: "rs4954490",
          value: "rs4954490",
          items: innerItems("rs4954490"),
        },
        {
          label: "rs41525747",
          value: "rs41525747",
          items: innerItems("rs41525747"),
        },
        {
          label: "rs4988235",
          value: "rs4988235",
          items: innerItems("rs4988235"),
        },
        {
          label: "rs41380347",
          value: "rs41380347",
          items: innerItems("rs41380347"),
        },
        {
          label: "rs145946881",
          value: "rs145946881",
          items: innerItems("rs145946881"),
        },
      ];

      L.control
        .select({
          position: "topleft",
          items: items,
          multi: true,
          iconChecked: "☑",
          iconUnchecked: "❒",
          onSelect: (selections) => {
            snpPanelSelections = selections;
            addPoints();
          },
        })
        .addTo(map);

      const yearInput = document.getElementById("year-input");
      const setYearButton = document.getElementById("set-year-btn");

      const setYear = () => {
        const selectedYear = +yearInput.value;
        const slider = document.getElementById("slider");
        slider.noUiSlider.set([selectedYear, selectedYear]);
      };

      setYearButton.addEventListener("click", setYear);

      initializeSlider();
    </script>
  </body>
</html>
