<!-- Using the following tutorials
- Leaflet Quickstart Tutorial - https://leafletjs.com/examples/quick-start/
- Leaflet Cluster Plugin Tutorial - https://leaflet.github.io/Leaflet.markercluster/#using-the-plugin
- Leaflet Control Select Tutorial - https://github.com/adammertel/Leaflet.Control.Select
- NoUiSlider Tutorial - https://refreshless.com/nouislider/
- ChatGPT - helped with finding useful libraries; generated starter code; helped with debugging
-->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Map</title>

    <!-- leaflet -->
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
      crossorigin=""
    />
    <script
      src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
      integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
      crossorigin=""
    ></script>

    <!-- boostrap -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>

    <!-- leaflet cluster -->
    <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet.markercluster@1.1.0/dist/MarkerCluster.css"
    />
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet.markercluster@1.1.0/dist/MarkerCluster.Default.css"
    />
    <script src="https://unpkg.com/leaflet.markercluster@1.1.0/dist/leaflet.markercluster.js"></script>

    <!-- nouislider -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.8.1/nouislider.css"
      rel="stylesheet"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.8.1/nouislider.js"></script>

    <!-- leaflet control select -->
    <link href="/leaflet.control.select.css" rel="stylesheet" />
    <script src="/leaflet.control.select.src.js"></script>

    <style>
      #map {
        height: 400px;
        width: 100%;
      }

      #slider {
        width: 100%;
      }

      .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
      }

      #controls {
        display: flex;
        flex-direction: row;
        align-items: center;
      }
    </style>
  </head>

  <body>
    <div class="container mt-3">
      <h1>Ancient Humans Map</h1>
      <div id="map"></div>
      <div id="controls">
        <div class="input-group">
          <span class="input-group-text">Years Ago</span>
          <input id="year-input" type="number" class="form-control" value="0" />
        </div>
        <button
          id="set-year-btn"
          type="button"
          class="btn btn-primary text-nowrap ms-4"
        >
          Set Year
        </button>
      </div>

      <div id="slider"></div>
      <p id="slider-text" class="mt-5"><b>Years Ago Range:</b> 0 - 10</p>
    </div>

    <script>
      // starting settings
      let snpPanelSelections = [{ num: 2, rsid: "rs4954490" }];
      let yearRange = [41625, 69375];

      // create map
      const map = L.map("map").setView([30, 0], 2);

      L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
        maxZoom: 19,
        attribution:
          '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
      }).addTo(map);

      let markers = L.markerClusterGroup();

      // add data to the map
      function shouldAddPoint(point, snpPanelSelections) {
        for (const selection of snpPanelSelections) {
          if (+point[selection.rsid] == selection.num) {
            return true;
          }
        }
        return false;
      }

      function addPoints() {
        newMarkers = L.markerClusterGroup();

        console.log(snpPanelSelections);

        d3.json("/ancientHumanData.json")
          .then((data) => {
            data.elements.forEach((d) => {
              const latitude = +d.Latitude;
              const longitude = +d.Longitude;
              const meanDate = +d["Mean Date"];
              const groupId = d["Group ID"] || "N/A";

              if (
                !isNaN(latitude) &&
                !isNaN(longitude) &&
                shouldAddPoint(d, snpPanelSelections) &&
                meanDate >= yearRange[0] &&
                meanDate <= yearRange[1]
              ) {
                const marker = L.marker([latitude, longitude]);
                marker.on("click", () => {
                  const popupContent = `
                    <b>Group ID:</b> ${groupId}<br>
                    <b>Political Entity:</b> ${
                      d["Political Entity"] || "N/A"
                    }<br>
                    <b>Mean Date:</b> ${meanDate}`;
                  marker.unbindPopup().bindPopup(popupContent).openPopup();
                });
                newMarkers.addLayer(marker);
              }
            });
            map.addLayer(newMarkers);
            map.removeLayer(markers);
            markers = newMarkers;
          })
          .catch((error) => {
            console.error(error);
          });
      }

      addPoints();

      // add SNP panel
      function innerItems(rsid) {
        return [
          {
            label: "0 copies of reference allele",
            value: { rsid: rsid, num: 0 },
          },
          {
            label: "1 copy of reference allele",
            value: { rsid: rsid, num: 1 },
          },
          {
            label: "2 copies of reference allele",
            value: { rsid: rsid, num: 2 },
          },
          { label: "missing data", value: { rsid: rsid, num: 9 } },
        ];
      }

      const items = [
        {
          label: "rs4954490",
          value: "rs4954490",
          items: innerItems("rs4954490"),
        },
        {
          label: "rs41525747",
          value: "rs41525747",
          items: innerItems("rs41525747"),
        },
        {
          label: "rs4988235",
          value: "rs4988235",
          items: innerItems("rs4988235"),
        },
        {
          label: "rs41380347",
          value: "rs41380347",
          items: innerItems("rs41380347"),
        },
        {
          label: "rs145946881",
          value: "rs145946881",
          items: innerItems("rs145946881"),
        },
      ];

      L.control
        .select({
          position: "topleft",
          items: items,
          multi: true,
          iconChecked: "☑",
          iconUnchecked: "❒",
          onSelect: (selections) => {
            snpPanelSelections = selections;
            addPoints();
          },
        })
        .addTo(map);

      // create timeline controls

      const yearInput = document.getElementById("year-input");
      const setYearButton = document.getElementById("set-year-btn");
      const sliderText = document.getElementById("slider-text");
      const slider = document.getElementById("slider");

      noUiSlider.create(slider, {
        start: [41625, 69375],
        connect: true,
        behaviour: "drag",
        range: {
          min: 0,
          max: 111000,
        },
        pips: {
          mode: "count",
          values: 9,
          density: 3,
        },
        step: 1,
      });

      const updateSliderText = (yearRange) => {
        sliderText.innerHTML = `<b>Years Ago Range:</b> ${yearRange[0]} - ${yearRange[1]}`;
      };

      updateSliderText(yearRange);

      slider.noUiSlider.on("set", (values, handle) => {
        // prevent duplicate addPoints() calls
        newYearRange = values.map((v) => Math.round(+v));
        if (
          newYearRange[0] == yearRange[0] &&
          newYearRange[1] == yearRange[1]
        ) {
          return;
        }
        yearRange = newYearRange;

        addPoints();
        updateSliderText(yearRange);
      });

      const setYear = () => {
        const selectedYear = +yearInput.value;
        slider.noUiSlider.set([selectedYear, selectedYear]);
      };

      setYearButton.addEventListener("click", setYear);
    </script>
  </body>
</html>
